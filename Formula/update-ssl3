#!/usr/bin/env perl

use v5.10.1;
use strict;
use warnings;

sub update_formula ($);
sub expand_var ($$);
sub get_sha256sum ($$);

my $version = shift or die "No version number specified.\n";

for my $formula_file (reverse sort glob 'openresty-openssl3*.rb') {
    if ($formula_file =~ /^openresty-openssl3(?:-(?:valgrind|asan|debug))?\.rb$/)
    {
        update_formula $formula_file;
    }
}

sub update_formula ($) {
    my $file = shift;
    open my $in, "<", $file
        or die "Cannot open $file for reading: $!\n";
    my $src = do { local $/; <$in>; };
    close $in;

    my $formula_var = {};

    my $changes = 0;

    if ($src =~ s/^(\s+) VERSION (\s* = \s*) "( \d+ \.\d+ \.\d+\w+ )" \.freeze$/${1}VERSION = "$version".freeze/xsm) {
        my $old_ver = $3;
        $formula_var->{VERSION} = $version;

        if ($old_ver ne $version) {
            say "INFO: $file: version got changed from $old_ver to $version";
            $changes++;

        } else {
            say "INFO: $file is already up to date: $version";
            return;
        }

    } else {
        die "$file: Version line not found";
    }

    if ($src =~ s/^(\s+) revision (\s+) (\d+)$/${1}revision${2}1/xsm) {
        my $old_rel = $3;
        if ($old_rel ne '1') {
            say "INFO: $file: release number got changed from $old_rel to 1";
            $changes++;
        }
    } else {
        die "$file: Release line not found";
    }

    #etc/"openssl@3.0.15"
    if ($src =~ s/etc\/"openssl\@(\d+\.\d+\.\d+)"/etc\/"openssl@($version)"/xsm) {
        my $old_ver = $1;
        if ($old_ver ne $version) {
            say "INFO: $file: version got changed from $old_ver to $version";
            $changes++;
        }
    }

    my $sha256sum;
    if ($src =~ /^(\s+) url \s+ "(\S+?)"$/xsm) {
        my $src_line = $2;
        $src_line = expand_var $src_line, $formula_var;
        $sha256sum .= get_sha256sum $src_line, $file;

    } else {
        die "$file: Source line not found";
    }

    if ($src =~ /^(\s+) sha256 (\s+) " (.+?) "$/xsm) {
        if ($1 ne $sha256sum) {
            $src =~ s/^(\s+) sha256 (\s+) " (.+?) "$/${1}sha256${2}"$sha256sum"/xsm;

            say "INFO: $file: sha256sum got changed";
            $changes++;
        }
    } else {
        die "$file: sha256sum line not found";
    }

    if ($changes > 0) {
        open my $out, ">", "$file"
            or die "Cannot open $file for writing: $!\n";
        print $out $src;
        close $out;
        say "$file updated with $changes change(s).";
    }
}

sub expand_var ($$) {
    my ($str, $var) = @_;
    $str =~ s/\#\{(\w+)\}/$var->{$1}/g;
    return $str;
}

sub get_sha256sum ($$) {
    my ($src_line, $file) = @_;

    my $sha256_txt;

    if ($src_line =~ m{^https?://}) {
        $sha256_txt = `set -o pipefail; curl -sfL $src_line | sha256sum`;
        if ($? != 0) {
            my $exit_code = $? >> 8;
            die "Error: failed to download $src_line, exit code $exit_code\n";
        }

    } else {
        $sha256_txt = `sha256sum $src_line`;
        if ($? != 0) {
            my $exit_code = $? >> 8;
            die "Error: failed to download $src_line, exit code $exit_code\n";
        }
    }

    $sha256_txt =~ s/\s+\S+$//;
    chomp $sha256_txt;

    return $sha256_txt;
}
